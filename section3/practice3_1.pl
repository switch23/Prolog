%演習3.1

%リストを連接するconc関数の定義

%空のリストとリストLを結合してリストLを生成
conc([],L,L).

%二つのリストL1とL2を結合してリストL3を生成
conc([X | L1],L2,[X | L3]) :-
  conc(L1,L2,L3).


/*
(実行例)

(a)の実行例
 ?- L = [a,b,c,d,e,f,g],
 |    conc(L1,[_,_,_],L).
 L = [a, b, c, d, e, f, g],
 L1 = [a, b, c, d] ;
 false.
 
 ?- L = [0,1,2,3,4,5,6,7,8,9],
 |    conc(L1,[_,_,_],L).
 L = [0, 1, 2, 3, 4, 5, 6, 7, 8|...],
 L1 = [0, 1, 2, 3, 4, 5, 6] ;
 false.
 
 ?- L = [0,1,1,2,3,5,8,13,21,33],
 |    conc(L1,[_,_,_],L).
 L = [0, 1, 1, 2, 3, 5, 8, 13, 21|...],
 L1 = [0, 1, 1, 2, 3, 5, 8] ;
 false.

 (a)のトレース

 [trace]  ?- L = [a,b,c,d,e,f,g],
|    conc(L1,[_,_,_],L).
   Call: (9) _3654=[a, b, c, d, e, f, g] ? creep
   Exit: (9) [a, b, c, d, e, f, g]=[a, b, c, d, e, f, g] ? creep
   Call: (9) conc(_3678, [_3660, _3666, _3672], [a, b, c, d, e, f, g]) ? creep
   Call: (10) conc(_4116, [_3660, _3666, _3672], [b, c, d, e, f, g]) ? creep
   Call: (11) conc(_4122, [_3660, _3666, _3672], [c, d, e, f, g]) ? creep
   Call: (12) conc(_4128, [_3660, _3666, _3672], [d, e, f, g]) ? creep
   Call: (13) conc(_4134, [_3660, _3666, _3672], [e, f, g]) ? creep
   Exit: (13) conc([], [e, f, g], [e, f, g]) ? creep
   Exit: (12) conc([d], [e, f, g], [d, e, f, g]) ? creep
   Exit: (11) conc([c, d], [e, f, g], [c, d, e, f, g]) ? creep
   Exit: (10) conc([b, c, d], [e, f, g], [b, c, d, e, f, g]) ? creep
   Exit: (9) conc([a, b, c, d], [e, f, g], [a, b, c, d, e, f, g]) ? creep
L = [a, b, c, d, e, f, g],
L1 = [a, b, c, d] .

 [trace]  ?- L = [0,1,2,3,4,5,6,7,8,9],
|    conc(L1,[_,_,_],L).
   Call: (9) _3482=[0, 1, 2, 3, 4, 5, 6, 7|...] ? creep
   Exit: (9) [0, 1, 2, 3, 4, 5, 6, 7|...]=[0, 1, 2, 3, 4, 5, 6, 7|...] ? creep
   Call: (9) conc(_3506, [_3488, _3494, _3500], [0, 1, 2, 3, 4, 5, 6, 7|...]) ? creep
   Call: (10) conc(_3960, [_3488, _3494, _3500], [1, 2, 3, 4, 5, 6, 7, 8|...]) ? creep
   Call: (11) conc(_3966, [_3488, _3494, _3500], [2, 3, 4, 5, 6, 7, 8, 9]) ? creep
   Call: (12) conc(_3972, [_3488, _3494, _3500], [3, 4, 5, 6, 7, 8, 9]) ? creep
   Call: (13) conc(_3978, [_3488, _3494, _3500], [4, 5, 6, 7, 8, 9]) ? creep
   Call: (14) conc(_3984, [_3488, _3494, _3500], [5, 6, 7, 8, 9]) ? creep
   Call: (15) conc(_3990, [_3488, _3494, _3500], [6, 7, 8, 9]) ? creep
   Call: (16) conc(_3996, [_3488, _3494, _3500], [7, 8, 9]) ? creep
   Exit: (16) conc([], [7, 8, 9], [7, 8, 9]) ? creep
   Exit: (15) conc([6], [7, 8, 9], [6, 7, 8, 9]) ? creep
   Exit: (14) conc([5, 6], [7, 8, 9], [5, 6, 7, 8, 9]) ? creep
   Exit: (13) conc([4, 5, 6], [7, 8, 9], [4, 5, 6, 7, 8, 9]) ? creep
   Exit: (12) conc([3, 4, 5, 6], [7, 8, 9], [3, 4, 5, 6, 7, 8, 9]) ? creep
   Exit: (11) conc([2, 3, 4, 5, 6], [7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9]) ? creep
   Exit: (10) conc([1, 2, 3, 4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8|...]) ? creep
   Exit: (9) conc([0, 1, 2, 3, 4, 5, 6], [7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7|...]) ? creep
L = [0, 1, 2, 3, 4, 5, 6, 7, 8|...],
L1 = [0, 1, 2, 3, 4, 5, 6] .

[trace]  ?- L = [0,1,2,3,4,5,6,7,8,9],
[trace]  ?-                           
[trace]  ?- L = [0,1,1,2,3,5,8,13,21,33],                                                
|    conc(L1,[_,_,_],L).
   Call: (9) _3484=[0, 1, 1, 2, 3, 5, 8, 13|...] ? creep
   Exit: (9) [0, 1, 1, 2, 3, 5, 8, 13|...]=[0, 1, 1, 2, 3, 5, 8, 13|...] ? creep
   Call: (9) conc(_3508, [_3490, _3496, _3502], [0, 1, 1, 2, 3, 5, 8, 13|...]) ? creep
   Call: (10) conc(_3964, [_3490, _3496, _3502], [1, 1, 2, 3, 5, 8, 13, 21|...]) ? creep
   Call: (11) conc(_3970, [_3490, _3496, _3502], [1, 2, 3, 5, 8, 13, 21, 33]) ? creep
   Call: (12) conc(_3976, [_3490, _3496, _3502], [2, 3, 5, 8, 13, 21, 33]) ? creep
   Call: (13) conc(_3982, [_3490, _3496, _3502], [3, 5, 8, 13, 21, 33]) ? creep
   Call: (14) conc(_3988, [_3490, _3496, _3502], [5, 8, 13, 21, 33]) ? creep
   Call: (15) conc(_3994, [_3490, _3496, _3502], [8, 13, 21, 33]) ? creep
   Call: (16) conc(_4000, [_3490, _3496, _3502], [13, 21, 33]) ? creep
   Exit: (16) conc([], [13, 21, 33], [13, 21, 33]) ? creep
   Exit: (15) conc([8], [13, 21, 33], [8, 13, 21, 33]) ? creep
   Exit: (14) conc([5, 8], [13, 21, 33], [5, 8, 13, 21, 33]) ? creep
   Exit: (13) conc([3, 5, 8], [13, 21, 33], [3, 5, 8, 13, 21, 33]) ? creep
   Exit: (12) conc([2, 3, 5, 8], [13, 21, 33], [2, 3, 5, 8, 13, 21, 33]) ? creep
   Exit: (11) conc([1, 2, 3, 5, 8], [13, 21, 33], [1, 2, 3, 5, 8, 13, 21, 33]) ? creep
   Exit: (10) conc([1, 1, 2, 3, 5, 8], [13, 21, 33], [1, 1, 2, 3, 5, 8, 13, 21|...]) ? creep
   Exit: (9) conc([0, 1, 1, 2, 3, 5, 8], [13, 21, 33], [0, 1, 1, 2, 3, 5, 8, 13|...]) ? creep
L = [0, 1, 1, 2, 3, 5, 8, 13, 21|...],
L1 = [0, 1, 1, 2, 3, 5, 8] .



 (b)の実行例
 ?- L = [a,b,c,d,e,f,g],
 |    conc(L1,[_,_,_],L),
 |    conc([_,_,_],L2,L1).
 L = [a, b, c, d, e, f, g],
 L1 = [a, b, c, d],
 L2 = [d] ;
 false.
 
 ?- L = [0,1,2,3,4,5,6,7,8,9],
 |    conc(L1,[_,_,_],L),
 |    conc([_,_,_],L2,L1).
 L = [0, 1, 2, 3, 4, 5, 6, 7, 8|...],
 L1 = [0, 1, 2, 3, 4, 5, 6],
 L2 = [3, 4, 5, 6] ;
 false.
 
 ?- L = [0,1,1,2,3,5,8,13,21,33],
 |    conc(L1,[_,_,_],L),
 |    conc([_,_,_],L2,L1).
 L = [0, 1, 1, 2, 3, 5, 8, 13, 21|...],
 L1 = [0, 1, 1, 2, 3, 5, 8],
 L2 = [2, 3, 5, 8] ;
 false.

 (b)のトレース 
[trace]  ?- L = [a,b,c,d,e,f,g],                                                         
|    conc(L1,[_,_,_],L),
|    conc([_,_,_],L2,L1).
   Call: (9) _3780=[a, b, c, d, e, f, g] ? creep
   Exit: (9) [a, b, c, d, e, f, g]=[a, b, c, d, e, f, g] ? creep
   Call: (9) conc(_3804, [_3786, _3792, _3798], [a, b, c, d, e, f, g]) ? creep
   Call: (10) conc(_4432, [_3786, _3792, _3798], [b, c, d, e, f, g]) ? creep
   Call: (11) conc(_4438, [_3786, _3792, _3798], [c, d, e, f, g]) ? creep
   Call: (12) conc(_4444, [_3786, _3792, _3798], [d, e, f, g]) ? creep
   Call: (13) conc(_4450, [_3786, _3792, _3798], [e, f, g]) ? creep
   Exit: (13) conc([], [e, f, g], [e, f, g]) ? creep
   Exit: (12) conc([d], [e, f, g], [d, e, f, g]) ? creep
   Exit: (11) conc([c, d], [e, f, g], [c, d, e, f, g]) ? creep
   Exit: (10) conc([b, c, d], [e, f, g], [b, c, d, e, f, g]) ? creep
   Exit: (9) conc([a, b, c, d], [e, f, g], [a, b, c, d, e, f, g]) ? creep
   Call: (9) conc([_3812, _3818, _3824], _3832, [a, b, c, d]) ? creep
   Call: (10) conc([_3818, _3824], _3832, [b, c, d]) ? creep
   Call: (11) conc([_3824], _3832, [c, d]) ? creep
   Call: (12) conc([], _3832, [d]) ? creep
   Exit: (12) conc([], [d], [d]) ? creep
   Exit: (11) conc([c], [d], [c, d]) ? creep
   Exit: (10) conc([b, c], [d], [b, c, d]) ? creep
   Exit: (9) conc([a, b, c], [d], [a, b, c, d]) ? creep
L = [a, b, c, d, e, f, g],
L1 = [a, b, c, d],
L2 = [d]  


 [trace]  ?- L = [0,1,2,3,4,5,6,7,8,9],
|    conc(L1,[_,_,_],L),
|    conc([_,_,_],L2,L1).
   Call: (9) _3800=[0, 1, 2, 3, 4, 5, 6, 7|...] ? creep
   Exit: (9) [0, 1, 2, 3, 4, 5, 6, 7|...]=[0, 1, 2, 3, 4, 5, 6, 7|...] ? creep
   Call: (9) conc(_3824, [_3806, _3812, _3818], [0, 1, 2, 3, 4, 5, 6, 7|...]) ? creep
   Call: (10) conc(_4456, [_3806, _3812, _3818], [1, 2, 3, 4, 5, 6, 7, 8|...]) ? creep
   Call: (11) conc(_4462, [_3806, _3812, _3818], [2, 3, 4, 5, 6, 7, 8, 9]) ? creep
   Call: (12) conc(_4468, [_3806, _3812, _3818], [3, 4, 5, 6, 7, 8, 9]) ? creep
   Call: (13) conc(_4474, [_3806, _3812, _3818], [4, 5, 6, 7, 8, 9]) ? creep
   Call: (14) conc(_4480, [_3806, _3812, _3818], [5, 6, 7, 8, 9]) ? creep
   Call: (15) conc(_4486, [_3806, _3812, _3818], [6, 7, 8, 9]) ? creep
   Call: (16) conc(_4492, [_3806, _3812, _3818], [7, 8, 9]) ? creep
   Exit: (16) conc([], [7, 8, 9], [7, 8, 9]) ? creep
   Exit: (15) conc([6], [7, 8, 9], [6, 7, 8, 9]) ? creep
   Exit: (14) conc([5, 6], [7, 8, 9], [5, 6, 7, 8, 9]) ? creep
   Exit: (13) conc([4, 5, 6], [7, 8, 9], [4, 5, 6, 7, 8, 9]) ? creep
   Exit: (12) conc([3, 4, 5, 6], [7, 8, 9], [3, 4, 5, 6, 7, 8, 9]) ? creep
   Exit: (11) conc([2, 3, 4, 5, 6], [7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9]) ? creep
   Exit: (10) conc([1, 2, 3, 4, 5, 6], [7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8|...]) ? creep
   Exit: (9) conc([0, 1, 2, 3, 4, 5, 6], [7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7|...]) ? creep
   Call: (9) conc([_3832, _3838, _3844], _3852, [0, 1, 2, 3, 4, 5, 6]) ? creep
   Call: (10) conc([_3838, _3844], _3852, [1, 2, 3, 4, 5, 6]) ? creep
   Call: (11) conc([_3844], _3852, [2, 3, 4, 5, 6]) ? creep
   Call: (12) conc([], _3852, [3, 4, 5, 6]) ? creep
   Exit: (12) conc([], [3, 4, 5, 6], [3, 4, 5, 6]) ? creep
   Exit: (11) conc([2], [3, 4, 5, 6], [2, 3, 4, 5, 6]) ? creep
   Exit: (10) conc([1, 2], [3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) ? creep
   Exit: (9) conc([0, 1, 2], [3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]) ? creep
L = [0, 1, 2, 3, 4, 5, 6, 7, 8|...],
L1 = [0, 1, 2, 3, 4, 5, 6],
L2 = [3, 4, 5, 6] .

[trace]  ?- L = [0,1,1,2,3,5,8,13,21,33],
|    conc(L1,[_,_,_],L),
|    conc([_,_,_],L2,L1).
   Call: (9) _3800=[0, 1, 1, 2, 3, 5, 8, 13|...] ? creep
   Exit: (9) [0, 1, 1, 2, 3, 5, 8, 13|...]=[0, 1, 1, 2, 3, 5, 8, 13|...] ? creep
   Call: (9) conc(_3824, [_3806, _3812, _3818], [0, 1, 1, 2, 3, 5, 8, 13|...]) ? creep
   Call: (10) conc(_4472, [_3806, _3812, _3818], [1, 1, 2, 3, 5, 8, 13, 21|...]) ? creep
   Call: (11) conc(_4478, [_3806, _3812, _3818], [1, 2, 3, 5, 8, 13, 21, 33]) ? creep
   Call: (12) conc(_4484, [_3806, _3812, _3818], [2, 3, 5, 8, 13, 21, 33]) ? creep
   Call: (13) conc(_4490, [_3806, _3812, _3818], [3, 5, 8, 13, 21, 33]) ? creep
   Call: (14) conc(_4496, [_3806, _3812, _3818], [5, 8, 13, 21, 33]) ? creep
   Call: (15) conc(_4502, [_3806, _3812, _3818], [8, 13, 21, 33]) ? creep
   Call: (16) conc(_4508, [_3806, _3812, _3818], [13, 21, 33]) ? creep
   Exit: (16) conc([], [13, 21, 33], [13, 21, 33]) ? creep
   Exit: (15) conc([8], [13, 21, 33], [8, 13, 21, 33]) ? creep
   Exit: (14) conc([5, 8], [13, 21, 33], [5, 8, 13, 21, 33]) ? creep
   Exit: (13) conc([3, 5, 8], [13, 21, 33], [3, 5, 8, 13, 21, 33]) ? creep
   Exit: (12) conc([2, 3, 5, 8], [13, 21, 33], [2, 3, 5, 8, 13, 21, 33]) ? creep
   Exit: (11) conc([1, 2, 3, 5, 8], [13, 21, 33], [1, 2, 3, 5, 8, 13, 21, 33]) ? creep
   Exit: (10) conc([1, 1, 2, 3, 5, 8], [13, 21, 33], [1, 1, 2, 3, 5, 8, 13, 21|...]) ? creep
   Exit: (9) conc([0, 1, 1, 2, 3, 5, 8], [13, 21, 33], [0, 1, 1, 2, 3, 5, 8, 13|...]) ? creep
   Call: (9) conc([_3832, _3838, _3844], _3852, [0, 1, 1, 2, 3, 5, 8]) ? creep
   Call: (10) conc([_3838, _3844], _3852, [1, 1, 2, 3, 5, 8]) ? creep
   Call: (11) conc([_3844], _3852, [1, 2, 3, 5, 8]) ? creep
   Call: (12) conc([], _3852, [2, 3, 5, 8]) ? creep
   Exit: (12) conc([], [2, 3, 5, 8], [2, 3, 5, 8]) ? creep
   Exit: (11) conc([1], [2, 3, 5, 8], [1, 2, 3, 5, 8]) ? creep
   Exit: (10) conc([1, 1], [2, 3, 5, 8], [1, 1, 2, 3, 5, 8]) ? creep
   Exit: (9) conc([0, 1, 1], [2, 3, 5, 8], [0, 1, 1, 2, 3, 5, 8]) ? creep
L = [0, 1, 1, 2, 3, 5, 8, 13, 21|...],
L1 = [0, 1, 1, 2, 3, 5, 8],
L2 = [2, 3, 5, 8] .
*/


/* 
 (考察・感想・評価)
 conc関数には,二つのリストL1,L2を連接して新たなリストL3を生成するという本来の機能がある一方で,
 リストL3を先に定義し,そのリストの要素に対して何らかの操作を指定し,条件に見合う要素のみを持つリストを具体化させることも可能である.
 今回の課題では,与えられたリストの先頭または最後尾の複数個の要素を削除したリストを生成した.
 Prologに置いて,条件という知識によって,与えられた情報から所望の要素を抽出できることを確かめることができた.
 また,(b)のように処理を多段化すると,複雑な条件を指定することも可能であり,柔軟性のある知識表現が可能となる.
 トレースからもわかるように,探索が進むにつれ,得たいリストの要素が一つずつ追加されていくのも特徴的であった.

*/
