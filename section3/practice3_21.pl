%演習3.21(教科書p.92)
%与えられた整数N1,N2に対して,制約N1≦X≦N2を満たすような整数Xをバックトラックによって求める関数betの定義

%制約N1≦N2を満たす時のみX=N1として具体化する
bet(N1, N2, N1) :-
  N1 =< N2.

%制約N1<N2を満たす場合はbet(N1+1,N2,X)として制約条件を強める
bet(N1, N2, X) :-
  N1 < N2,
  Y is N1 + 1,
  bet(Y, N2, X).

/*
(実行例)
?- bet(10, 20, X).     
X = 10 ;
X = 11 ;
X = 12 ;
X = 13 ;
X = 14 ;
X = 15 ;
X = 16 ;
X = 17 ;
X = 18 ;
X = 19 ;
X = 20 .


?- bet(-5, 5, X).   
X = -5 ;
X = -4 ;
X = -3 ;
X = -2 ;
X = -1 ;
X = 0 ;
X = 1 ;
X = 2 ;
X = 3 ;
X = 4 ;
X = 5 .



[trace]  ?- bet(10, 20, X).
   Call: (8) bet(10, 20, _2950) ? creep
   Call: (9) 10=<20 ? creep
   Exit: (9) 10=<20 ? creep
   Exit: (8) bet(10, 20, 10) ? creep
X = 10 .

[trace]  ?- bet(-5, 5, X). 
   Call: (8) bet(-5, 5, _2948) ? creep
   Call: (9) -5=<5 ? creep
   Exit: (9) -5=<5 ? creep
   Exit: (8) bet(-5, 5, -5) ? creep
X = -5 .


*/

/*
(考察・感想)
Prologでは算術演算も行うことができ,N1の値を1ずつ大きくすることで制約条件の範囲内を逐次的に調べた.
また,大小比較によって制約条件を設定し,再帰的定義のコントロールに活かした.
今回の課題では,これらの機能と再帰的定義を組み合わせることによって,バックトラックで制約条件を満たす整数を全て求めた.

*/
